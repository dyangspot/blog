<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Dylan's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://dyangspot.github.io/"/>
  <updated>2015-03-30T03:25:02.000Z</updated>
  <id>http://dyangspot.github.io/</id>
  
  <author>
    <name><![CDATA[Dylan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[emberjs-notes]]></title>
    <link href="http://dyangspot.github.io/2015/03/29/emberjs-notes/"/>
    <id>http://dyangspot.github.io/2015/03/29/emberjs-notes/</id>
    <published>2015-03-30T03:01:42.000Z</published>
    <updated>2015-03-30T03:25:02.000Z</updated>
    <content type="html"><![CDATA[<p>今儿被一个奇怪的问题困扰了一整天，大概是用emberjs要实现一个List-Detail的结构，屏幕左侧是个选项栏，选择选项栏中的项目，会在屏幕右侧展现你所选中的具体内容。
错误做法：如果实现的List放在在IndexRouter中，Detail放在 DetailRouter中。Detail page会跳转， 无法实现List-Deail在同一页面的效果。具体原因目前不详</p>
<p>正确做法： 把List放在ApplicationRouter中，Detail放在对应的DetailRouter中，List放在Application template下，Detail页面布局的  放在Application template下。</p>
<p><a href="http://jsbin.com/ijejap/1/edit?html,js" target="_blank" rel="external">例子</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今儿被一个奇怪的问题困扰了一整天，大概是用emberjs要实现一个List-Detail的结构，屏幕左侧是个选项栏，选择选项栏中的项目，会在屏幕右侧展现你所选中的具体内容。
错误做法：如果实现的List放在在IndexRouter中，Detail放在 DetailRoute]]>
    </summary>
    
      <category term="emberjs" scheme="http://dyangspot.github.io/tags/emberjs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[03-28-2015]]></title>
    <link href="http://dyangspot.github.io/2015/03/28/03-28-2015/"/>
    <id>http://dyangspot.github.io/2015/03/28/03-28-2015/</id>
    <published>2015-03-28T04:47:00.000Z</published>
    <updated>2015-03-28T05:12:49.000Z</updated>
    <content type="html"><![CDATA[<p>自去年2月份以来，直接或间接的从事各种coding的工作已经整整一年了，期间先后以学生身份part-time做intern，中途做open source contributer，再到去年9月份正式加入公司，算是尘埃落定，自个暂时有了个着落。回想起来，并非CS科班出身的自己，迷迷糊糊半路出家走上IT的道路，这一年的成长收货也是良多的，期间虽然经历过各种心酸挫折，到最后能够找到个不错的工作，也算是对自己努力的回报吧。
今儿的工作依旧是在SharePoint平台上面进行Meetings模块的搭建，其实就是做各种XML的configuration嘛，真是自欺欺人orz。下午送走了Jin大叔，Jin是我进公司以来我认识的唯一一个华人同事，能够跟Jin一起工作，也是倍感荣幸的。
发现自己自从做Sharepoint以来，好久没有写emberjs了，会不会手生了都忘光了呢？明儿又是周末了，whatever, 等下周再说吧...</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自去年2月份以来，直接或间接的从事各种coding的工作已经整整一年了，期间先后以学生身份part-time做intern，中途做open source contributer，再到去年9月份正式加入公司，算是尘埃落定，自个暂时有了个着落。回想起来，并非CS科班出身的自己，]]>
    </summary>
    
      <category term="work@point.io" scheme="http://dyangspot.github.io/tags/work-point-io/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[03-26-2015]]></title>
    <link href="http://dyangspot.github.io/2015/03/26/03-26-2015/"/>
    <id>http://dyangspot.github.io/2015/03/26/03-26-2015/</id>
    <published>2015-03-27T02:10:04.000Z</published>
    <updated>2015-03-27T05:00:37.000Z</updated>
    <content type="html"><![CDATA[<p>今儿继续来写点流水账，发现年龄大了真是记忆力会减退的:(，anyway，好记性不如烂笔头. 写点工作日志，以后有据可考。今儿的工作总结如下</p>
<ul>
<li>初步完成SharePoint服务器Meetings模块的后台搭建工作，再次不得不吐槽，SharePoint is a very ugly platform。 倒不是SharePoint有多难。微软产品共性，产品做的不仅奇怪而且难用，主要是开发工具。 虽说是做服务器开发，但是自己做sharepoint的服务器开发跟用其他语言来进行开发大相径庭啊，自己几乎就是在复制粘贴修改各种XML表格。深切怀疑自己自从做SharePoint这个项目1个多月以来，自己的Coding技能退化的不成样子了 Orz....</li>
<li>临近下班拿到Jin大叔分配的新任务，帮助他实现一个APIflow上的Emberjs模板的对数据的CRUD。 突然记起Jon之前实现过类似的东西，随后跟Jon要了源码，过几天研究一番，到是也省了不少力气不用重新搭建了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>今儿继续来写点流水账，发现年龄大了真是记忆力会减退的:(，anyway，好记性不如烂笔头. 写点工作日志，以后有据可考。今儿的工作总结如下</p>
<ul>
<li>初步完成SharePoint服务器Meetings模块的后台搭建工作，再次不得不吐槽，SharePoint ]]>
    </summary>
    
      <category term="work@point.io" scheme="http://dyangspot.github.io/tags/work-point-io/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[connected-components-dfs]]></title>
    <link href="http://dyangspot.github.io/2015/03/24/connected-components-dfs/"/>
    <id>http://dyangspot.github.io/2015/03/24/connected-components-dfs/</id>
    <published>2015-03-25T02:09:50.000Z</published>
    <updated>2015-03-25T02:16:34.000Z</updated>
    <content type="html"><![CDATA[<p>Def. Vertices <em>v</em> and <em>w</em> are connected if there is a path between them.</p>
<p>Goal. Proepocess graph to answer queries of the form is <em>v</em> connected to <em>w</em> in <strong>constant</strong> time?</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class CC</span><br><span class="line">	<span class="title">CC</span><span class="params">(Graph G)</span>	 	<span class="comment">// 	 find connected components in G</span></span><br><span class="line">	<span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span>        <span class="comment">//are v and w connected?</span></span><br><span class="line">	<span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> 					<span class="comment">//number of connected components</span></span><br><span class="line">	<span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> v)</span>			<span class="comment">// component identifier for v</span></span></span><br></pre></td></tr></table></figure></p>
<p>The relation &quot;is connected to&quot; is an <em>equivalence relation</em>:</p>
<ul>
<li>
<p>Relflexive: <em>v</em> is connected to <em>v</em>.</p>
</li>
<li>
<p>Symmetric: if <em>v</em> is connected to <em>w</em>,then <em>w</em> is connected to <em>v</em>.</p>
</li>
<li>
<p>Transitive: if <em>v</em> connected to <em>w</em> and <em>w</em> connected to <em>x</em>, then <em>v</em> connected to <em>x</em>.</p>
</li>
</ul>
<p>Def. A ** connected component** is a maximal set of connected vertices.</p>
<p>Goal. Partition vertices into connected components.</p>
<p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Initizlize all vertices *v* as unmarked.</span><br><span class="line">For each unmarked vertex *v*, run DFS to identify all vertices discovered as part of the same component.</span><br><span class="line">``` </span><br><span class="line"><span class="preprocessor">### Finding connected components with DFS</span></span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> boolan marked[];</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] id; <span class="comment">// id[v] = id of component containing v</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">count</span>; <span class="comment">// number of components</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> CC(Graph G)&#123;</span><br><span class="line">		marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.V()]; <span class="comment">// create marked array</span></span><br><span class="line">		id = <span class="keyword">new</span> <span class="keyword">int</span>[G.V()];		<span class="comment">// create id array</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;G.V();v++)&#123;  <span class="comment">// go through every vertices in graph</span></span><br><span class="line">			<span class="keyword">if</span>(!marked[v])&#123; <span class="comment">// if v not marked </span></span><br><span class="line">				dfs(G,v);   <span class="comment">//</span></span><br><span class="line">				<span class="keyword">count</span>++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">count</span>()&#123;		<span class="comment">// # of components</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> id(<span class="keyword">int</span> v)&#123; <span class="comment">// id of component containing v</span></span><br><span class="line">		<span class="keyword">return</span> id[v];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> dfs(Graph G,<span class="keyword">int</span> v)&#123;</span><br><span class="line">		marked[v] = <span class="keyword">true</span>;</span><br><span class="line">		id[v] = <span class="keyword">count</span>;			<span class="comment">// all vertices discovered in same call of dfs have same id</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> w:G.adj(v))&#123;</span><br><span class="line">			<span class="keyword">if</span>(!marked[w])&#123;</span><br><span class="line">				dfs(G,w);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>Application: particle detection</h3>
<p>Particle detection. Give grayscale image of particles, identify &quot;blobs.&quot;</p>
<ul>
<li>Vertex:pixel</li>
<li>Edge: between two adjacent pixels with grayscale value &gt;= 70</li>
<li>Blob: connected component of 20-30 pixels.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Def. Vertices <em>v</em> and <em>w</em> are connected if there is a path between them.</p>
<p>Goal. Proepocess graph to answer queries of]]>
    </summary>
    
      <category term="Algorithm" scheme="http://dyangspot.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[breadth-first-search]]></title>
    <link href="http://dyangspot.github.io/2015/03/24/breadth-first-search/"/>
    <id>http://dyangspot.github.io/2015/03/24/breadth-first-search/</id>
    <published>2015-03-25T02:09:35.000Z</published>
    <updated>2015-03-25T02:21:27.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Depth-first search. Put unvisited vertices on a <strong>stack</strong></li>
<li>Breadth-first search. Put unvisited vertices on a <strong>queue</strong></li>
</ul>
<p>With depth-first search it is either an explicit stack (with a nonrecursive version) or the function-call stack (with a recursive version).</p>
<p><strong>Shortest path</strong>. Find path from s to t that uses <strong>fewer number of edges</strong>.</p>
<hr>
<p>BFS(from source vertex s)</p>
<p>Put s onto a FIFO queue, and mark s as visited.
Repeat until the queue is empty:</p>
<ul>
<li>remove the least recently added vertex v.</li>
<li>add each of v's unvisited neighbors to the queue, and mark them as visited.</li>
</ul>
<hr>
<p><strong>Proposition</strong>. BFS computs shortest paths(fewest number of edges) from <em>s</em> to all other vertices in a graph in time proportional to <em>E + V</em>(# of edges + # of vertices).</p>
<h3>Code Implementation</h3>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreadthFirstPaths</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span>[] marked;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] edgeTo;</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Graph G,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		Queue&lt;Integer&gt; q = <span class="keyword">new</span> Queue&lt;Integer&gt;();</span><br><span class="line">		q.enqueue(s);</span><br><span class="line">		marked[s] = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">			<span class="keyword">int</span> v = q.dequeue();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> w :G.adj(v))&#123;</span><br><span class="line">				<span class="keyword">if</span>(!marked[w])&#123;</span><br><span class="line">					q.enqueue[w] = <span class="keyword">true</span>;</span><br><span class="line">					edgeTo[w] = v;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>###BFS application:</p>
<ul>
<li>routing-&gt; Fewest number of hops in a communication network.</li>
<li>Kevin Bacon numbers;</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>Depth-first search. Put unvisited vertices on a <strong>stack</strong></li>
<li>Breadth-first search. Put unvisited vertices on a <]]>
    </summary>
    
      <category term="Algorithm" scheme="http://dyangspot.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[depth-first-search]]></title>
    <link href="http://dyangspot.github.io/2015/03/24/depth-first-search/"/>
    <id>http://dyangspot.github.io/2015/03/24/depth-first-search/</id>
    <published>2015-03-24T04:29:30.000Z</published>
    <updated>2015-03-24T21:12:17.000Z</updated>
    <content type="html"><![CDATA[<h1>Graph</h1>
<h2>Tremaux maze exploration</h2>
<ul>
<li>make each visited intersection and each visited passage</li>
<li>Retrace steps when no unvisted options</li>
</ul>
<h2>Depth-first search</h2>
<ul>
<li>Goal. Systematically search through a graph, find all vertices connected to s.</li>
<li>Idea. Mimic maze exploration</li>
</ul>
<p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DFS(<span class="built_in">to</span> visit <span class="operator">a</span> vertex v)</span><br><span class="line">Mark v <span class="keyword">as</span> visited.</span><br><span class="line">Recursively visit all unmarked vertices w adjacent <span class="built_in">to</span> v.</span><br></pre></td></tr></table></figure></p>
<h3>Design pattern</h3>
<ul>
<li>Decouple graph data type from graph processing.</li>
<li>Create a Graph object.</li>
<li>Pass the Graph to graph-processing routine.</li>
<li>Query the graph-processing routine for information.</li>
</ul>
<h3>Algorithm.</h3>
<ul>
<li>Use recursion(ball of string).</li>
<li>Mark each visited vertex(and keep track of edge taken to visit to it).</li>
<li>Return(retrace steps) when no unvisited options.</li>
</ul>
<h3>Data structures.</h3>
<ul>
<li><strong>boolean[] marked</strong> to mark visited vertices</li>
<li><strong>int[] edgeTo</strong> to keep tree of paths.
(edgeTo[w] == v) means that edge v-w taken to visit w for the first time.</li>
</ul>
<h3>Java API</h3>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class Paths</span><br><span class="line"></span><br><span class="line"><span class="title">Paths</span><span class="params">(Graph G,<span class="keyword">int</span> s)</span> <span class="comment">//find paths in G from source s </span></span><br><span class="line"><span class="keyword">boolean</span> <span class="title">hasPathTo</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="comment">//is there a path from s to v?</span></span><br><span class="line">Iterable&lt;Integer&gt; <span class="title">pathTo</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="comment">//path from s to v;null if no such path</span></span></span><br></pre></td></tr></table></figure></p>
<h3>Code Implemention</h3>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Paths paths = <span class="keyword">new</span> Paths(G,s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; G.V(); v++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(paths.hasPathTo(v))</span><br><span class="line">		StdOut.println(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3>Depth-first search code</h3>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthFirstPaths</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span>[] marked;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] edgeTo;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> s;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DepthFirstPaths</span><span class="params">(Graph G,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		…</span><br><span class="line">		dfs(G,s);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph G,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">		marked[v] = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> w:G.adj(v))&#123;</span><br><span class="line">			<span class="keyword">if</span>(!marked[w])&#123;</span><br><span class="line">				dfs(G,w);</span><br><span class="line">				edgeTo[w] = v;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://imgs.xkcd.com/comics/dfs.png" alt="DFS used for dating"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1>Graph</h1>
<h2>Tremaux maze exploration</h2>
<ul>
<li>make each visited intersection and each visited passage</li>
<li>Retrace steps whe]]>
    </summary>
    
      <category term="Algorithm" scheme="http://dyangspot.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[“03-23-2015"]]></title>
    <link href="http://dyangspot.github.io/2015/03/23/worksummary-03-23-2015/"/>
    <id>http://dyangspot.github.io/2015/03/23/worksummary-03-23-2015/</id>
    <published>2015-03-23T23:37:39.000Z</published>
    <updated>2015-03-27T04:54:40.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>SharePoint的Meetings模块开发不顺利，主要问题在于创建的Meetings instance模块无法继承Meeting合Agenda类型。其中根本问题还是对SharePoint的开发不熟悉，缺乏经验。忍不住吐槽Microsoft的产品简直太难用了</li>
<li>更新了Apiflow的非Ember的模板引擎</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>SharePoint的Meetings模块开发不顺利，主要问题在于创建的Meetings instance模块无法继承Meeting合Agenda类型。其中根本问题还是对SharePoint的开发不熟悉，缺乏经验。忍不住吐槽Microsoft的产品简直太难用了<]]>
    </summary>
    
      <category term="work@point.io" scheme="http://dyangspot.github.io/tags/work-point-io/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala-test]]></title>
    <link href="http://dyangspot.github.io/2015/03/22/scala-test/"/>
    <id>http://dyangspot.github.io/2015/03/22/scala-test/</id>
    <published>2015-03-23T03:58:15.000Z</published>
    <updated>2015-03-23T03:58:54.000Z</updated>
    <content type="html"><![CDATA[<p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="string">"Hello,Scala!"</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Emberjs资料索引]]></title>
    <link href="http://dyangspot.github.io/2015/03/22/emberjs-reference/"/>
    <id>http://dyangspot.github.io/2015/03/22/emberjs-reference/</id>
    <published>2015-03-22T15:11:05.000Z</published>
    <updated>2015-03-23T03:41:54.000Z</updated>
    <content type="html"><![CDATA[<h1>Ember.js 资料索引</h1>
<p>此索引<a href="https://github.com/astray1988/Emberjs_reference_cn" target="_blank" rel="external">Github repo</a></p>
<h2>中文资料</h2>
<ul>
<li>
<p><a href="http://www.emberjs.cn/guides/" target="_blank" rel="external">Emberjs教程指南</a></p>
</li>
<li>
<p>《30天学习30种新技术》系列中的<a href="http://segmentfault.com/a/1190000000365519" target="_blank" rel="external">Day19: EmberJS 入门指南</a></p>
</li>
</ul>
<h2>英文资料</h2>
<ul>
<li>
<p><a href="http://emberjs.com/guides/getting-started/" target="_blank" rel="external">Ember.js Guides</a>
or 从<a href="https://leanpub.com/emberjsguides/read" target="_blank" rel="external">这里</a>获取</p>
</li>
<li>
<p><a href="http://twbrandt.github.io/2013/02/11/Ember-Quick_Start_Guide/" target="_blank" rel="external">Getting Started with Ember.js</a>  by Tom Brandt</p>
</li>
<li>
<p><a href="http://www.lukaszielinski.de/blog/posts/2013/02/23/ember-dot-js-code-walkthrough-video/" target="_blank" rel="external">Ember.js Code-Walkthrough (Video)</a>- Another Programming Blog</p>
</li>
<li>
<p><a href="http://www.embercasts.com/" target="_blank" rel="external">Ember.js Screencasts</a> - embercasts</p>
</li>
<li>
<p><a href="http://gilesbowkett.blogspot.com/2013/06/heretical-guide-to-ember-js.html" target="_blank" rel="external">Heretical Guide To Ember JS</a> by GILES BOWKETT</p>
</li>
</ul>
<h2>书籍</h2>
<ul>
<li><a href="http://www.amazon.com/Ember-js-Action-Joachim-Haagen-Skeie/dp/1617291455" target="_blank" rel="external">Ember.js in Action</a></li>
</ul>
<h2>视频课程</h2>
<ul>
<li>
<p>Code School提供的<a href="https://www.codeschool.com/courses/warming-up-with-ember-js" target="_blank" rel="external">Warming Up With Ember.js</a></p>
</li>
<li>
<p>Pluralsight提供的<a href="http://www.pluralsight.com/courses/emberjs-fundamentals" target="_blank" rel="external">Ember.js
Fundamentals</a></p>
</li>
<li>
<p>Tuts 提供的<a href="http://code.tutsplus.com/courses/ember-for-beginners" target="_blank" rel="external">Ember for Beginners</a></p>
</li>
<li>
<p>lynda提供的<a href="http://www.lynda.com/Emberjs-tutorials/Up-Running-Emberjs/178116-2.html" target="_blank" rel="external">Up and Running with Ember.js</a></p>
</li>
<li>
<p>ember101提供的<a href="http://ember101.com/videos/001-intro-and-binding-data-to-templates" target="_blank" rel="external">Ember 101 Video Series</a></p>
</li>
</ul>
<h2>其他资源 Github,Forum,Blogs</h2>
<ul>
<li><a href="http://emberwatch.com/" target="_blank" rel="external">EmberWatch</a></li>
<li><a href="http://eviltrout.com/" target="_blank" rel="external">Robin Ward’s blog AKA Evil Trout</a></li>
<li><a href="http://nerdyworm.com/" target="_blank" rel="external">nerdyworm</a> 与他的<a href="https://github.com/nerdyworm" target="_blank" rel="external">github</a></li>
<li>airpair提供的<a href="https://www.airpair.com/posts/tag/ember.js" target="_blank" rel="external">ember.js posts</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1>Ember.js 资料索引</h1>
<p>此索引<a href="https://github.com/astray1988/Emberjs_reference_cn" target="_blank" rel="external">Github repo</a></p>]]>
    </summary>
    
      <category term="emberjs" scheme="http://dyangspot.github.io/tags/emberjs/"/>
    
  </entry>
  
</feed>